# Just a reminder on redirection of streams
# 0 - stdin, the standard input stream.
# 1 - stdout, the standard output stream.
# 2 - stderr, the standard error stream.


alias l="ls -halp"
alias ll="ls -hlp"
alias lm="ls -hp"

# alias ds="du -khd 1 . | sort -h"
function ds(){
    echo "[>] Command: du -khd 1 $@ | sort -h\n"

    du -khd 1 $@ | sort -h
}

alias gs='git status'
alias gl='git log'
alias gr='git restore'
alias gco='git checkout'
alias glg='git log --graph'
alias glp='git log --pretty=oneline'

# alias fetch_pull='git fetch $@ && git pull $@'
function fetch_pull(){
    echo "[>] Command: git fetch $@ && git pull $@\n"
    git fetch $@ && git pull $@
}

alias dockerlsa="docker container ls -a"
alias dockerls="docker container ls --format 'table {{.ID}}\t{{.Image}}\t{{.Status}}\t{{.Names}}'"
alias dockeri="docker image"

alias dc="docker-compose"

if ! command -v pbcopy 1>/dev/null 2>&1; then
    alias pbcopy='xclip -selection clipboard'
    alias pbpaste='xclip -selection clipboard -o'
fi

export GOTO_EDITOR="vim"

case "$(uname -s)" in
    Linux)

		export ANDROID_HOME=$HOME/Android/Sdk
        export GTK_IM_MODULE=cedilla
        export QT_IM_MODULE=cedilla

		;;
	Darwin)
		export ANDROID_HOME="$HOME/Library/Android/sdk"

		;;
esac

if [ -d $ANDROID_HOME/tools ]; then
    export PATH=$PATH:$ANDROID_HOME/tools
    export PATH=$PATH:$ANDROID_HOME/platform-tools
fi

LINUX_BREW_BIN=/home/linuxbrew/.linuxbrew/bin

if [[ -d $LINUX_BREW_BIN ]] && [[ -x $LINUX_BREW_BIN/brew ]]; then
    export PATH=$PATH:$LINUX_BREW_BIN
    eval $($LINUX_BREW_BIN/brew shellenv)
fi

function see_certificate() {
    command_name=$0
    domain=$1
    if [ -z ${1+x} ]; then
        echo "[!] Usage: $command_name <domain.tld>"
        echo "[!] Example: $command_name google.com"
    elif command -v openssl 1>/dev/null 2>&1; then
        echo "[>] Showing certificate for \"$domain\" with Openssl."
        echo | openssl s_client -showcerts -servername gnupg.org -connect $domain:443 2>/dev/null | openssl x509 -inform pem -noout -text | less
    else
        echo "This script depends on OpenSSL"
    fi
}

function b64_decode() {
    command_name=$0
    string=$1
    if [ -z ${1+x} ]; then
        echo "[!] Usage: $command_name <base64string>"
        echo "[!] Example: $command_name SGVsbG8gV29ybGQ="
    elif command -v openssl 1>/dev/null 2>&1; then
        echo "[>] Showing base64 decode for \"$string\" with Openssl."
        echo $string | openssl base64 -d
    else
        echo "This script depends on OpenSSL"
    fi
}

function b64_encode() {
    command_name=$0
    string=$1
    if [ -z ${1+x} ]; then
        echo "[!] Usage: $command_name <ordinal_string>"
        echo "[!] Example: $command_name \"Hello World\""
    elif command -v openssl 1>/dev/null 2>&1; then
        echo "[>] Showing base64 decode for \"$string\" with Openssl."
        echo -n $string | openssl base64
    else
        echo "This script depends on OpenSSL"
    fi
}
